/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ (function() {

eval("// src/main.ts\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n// Initial mock data\nvar initialIncidents = [\n    {\n        id: 1,\n        title: \"Biased Recommendation Algorithm\",\n        description: \"Algorithm consistently favored certain demographics in content recommendations, leading to information filter bubbles and potential reinforcement of biases. Our analysis showed statistically significant preference towards content aligned with particular ideological positions, despite diverse user interests.\",\n        severity: \"Medium\",\n        reported_at: \"2025-03-15T10:00:00Z\"\n    },\n    {\n        id: 2,\n        title: \"LLM Hallucination in Critical Info\",\n        description: \"LLM provided incorrect safety procedure information when queried about emergency protocols, potentially endangering users who might follow the incorrect advice. The model confidently described nonexistent emergency procedures that contradicted established safety guidelines for hazardous material handling.\",\n        severity: \"High\",\n        reported_at: \"2025-04-01T14:30:00Z\"\n    },\n    {\n        id: 3,\n        title: \"Minor Data Leak via Chatbot\",\n        description: \"Chatbot inadvertently exposed non-sensitive user metadata in responses, including approximate location and device type information. While not containing personally identifiable information, this leak could potentially aid in user fingerprinting across sessions.\",\n        severity: \"Low\",\n        reported_at: \"2025-03-20T09:15:00Z\"\n    },\n    {\n        id: 4,\n        title: \"Automated Content Moderation Failure\",\n        description: \"AI content moderation system failed to detect harmful content in multiple languages, allowing policy-violating material to remain visible for several hours. The system consistently missed nuanced policy violations in non-English languages, particularly when culturally-specific contexts were involved.\",\n        severity: \"Medium\",\n        reported_at: \"2025-04-10T16:45:00Z\"\n    }\n];\n// Dashboard class to manage the application state and UI\nvar AISafetyDashboard = /** @class */ (function () {\n    function AISafetyDashboard() {\n        this.incidents = [];\n        this.expandedId = null;\n        this.severityFilter = 'All';\n        this.sortOrder = 'newest';\n        this.isFormVisible = false;\n        // Initialize DOM elements\n        this.incidentsList = document.getElementById('incidents-list');\n        this.severityFilterSelect = document.getElementById('severity-filter');\n        this.dateSortSelect = document.getElementById('date-sort');\n        this.newIncidentForm = document.getElementById('new-incident-form');\n        this.formContainer = document.getElementById('form-container');\n        this.toggleFormBtn = document.getElementById('toggle-form-btn');\n        this.cancelFormBtn = document.getElementById('cancel-form-btn');\n        this.emptyState = document.getElementById('empty-state');\n        this.emptyStateBtn = document.getElementById('empty-state-btn');\n        this.incidentsCount = document.getElementById('incidents-count');\n        this.notification = document.getElementById('notification');\n        // Load initial data\n        this.incidents = __spreadArray([], initialIncidents, true);\n        // Set up event listeners\n        this.setupEventListeners();\n        // Initial render\n        this.renderIncidents();\n        this.updateIncidentsCount();\n    }\n    AISafetyDashboard.prototype.setupEventListeners = function () {\n        var _this = this;\n        // Filter by severity\n        this.severityFilterSelect.addEventListener('change', function () {\n            _this.severityFilter = _this.severityFilterSelect.value;\n            _this.renderIncidents();\n            _this.updateIncidentsCount();\n        });\n        // Sort by date\n        this.dateSortSelect.addEventListener('change', function () {\n            _this.sortOrder = _this.dateSortSelect.value;\n            _this.renderIncidents();\n        });\n        // Toggle form visibility\n        this.toggleFormBtn.addEventListener('click', function () {\n            _this.toggleForm();\n        });\n        // Empty state button\n        this.emptyStateBtn.addEventListener('click', function () {\n            _this.toggleForm();\n        });\n        // Cancel form button\n        this.cancelFormBtn.addEventListener('click', function () {\n            _this.hideForm();\n            _this.newIncidentForm.reset();\n        });\n        // New incident form submission\n        this.newIncidentForm.addEventListener('submit', function (e) {\n            e.preventDefault();\n            if (_this.handleFormSubmit()) {\n                _this.hideForm();\n                _this.showNotification();\n            }\n        });\n        // Delegate click events for incident items\n        this.incidentsList.addEventListener('click', function (e) {\n            var _a;\n            var target = e.target;\n            if (target.classList.contains('view-details-btn') || ((_a = target.parentElement) === null || _a === void 0 ? void 0 : _a.classList.contains('view-details-btn'))) {\n                var button = target.classList.contains('view-details-btn') ? target : target.parentElement;\n                var incidentId = parseInt((button === null || button === void 0 ? void 0 : button.getAttribute('data-id')) || '0', 10);\n                _this.toggleIncidentDetails(incidentId);\n            }\n        });\n    };\n    AISafetyDashboard.prototype.toggleForm = function () {\n        this.isFormVisible = !this.isFormVisible;\n        if (this.isFormVisible) {\n            this.formContainer.classList.add('show-form');\n            // Focus on the title input\n            setTimeout(function () {\n                document.getElementById('title').focus();\n            }, 300);\n        }\n        else {\n            this.formContainer.classList.remove('show-form');\n        }\n    };\n    AISafetyDashboard.prototype.hideForm = function () {\n        this.isFormVisible = false;\n        this.formContainer.classList.remove('show-form');\n    };\n    AISafetyDashboard.prototype.updateIncidentsCount = function () {\n        var filteredCount = this.getFilteredIncidents().length;\n        this.incidentsCount.textContent = \"\".concat(filteredCount, \" incident\").concat(filteredCount !== 1 ? 's' : '');\n    };\n    AISafetyDashboard.prototype.getFilteredIncidents = function () {\n        var _this = this;\n        // Filter incidents\n        if (this.severityFilter === 'All') {\n            return __spreadArray([], this.incidents, true);\n        }\n        else {\n            return this.incidents.filter(function (incident) { return incident.severity === _this.severityFilter; });\n        }\n    };\n    AISafetyDashboard.prototype.renderIncidents = function () {\n        var _this = this;\n        // Get filtered incidents\n        var filteredIncidents = this.getFilteredIncidents();\n        // Sort incidents\n        filteredIncidents.sort(function (a, b) {\n            var dateA = new Date(a.reported_at).getTime();\n            var dateB = new Date(b.reported_at).getTime();\n            return _this.sortOrder === 'newest' ? dateB - dateA : dateA - dateB;\n        });\n        // Clear current list\n        this.incidentsList.innerHTML = '';\n        // Show empty state if no incidents match filters\n        if (filteredIncidents.length === 0) {\n            this.emptyState.style.display = 'block';\n            this.incidentsList.style.display = 'none';\n        }\n        else {\n            this.emptyState.style.display = 'none';\n            this.incidentsList.style.display = 'block';\n            // Render each incident\n            filteredIncidents.forEach(function (incident) {\n                var incidentElement = _this.createIncidentElement(incident);\n                _this.incidentsList.appendChild(incidentElement);\n            });\n        }\n    };\n    AISafetyDashboard.prototype.createIncidentElement = function (incident) {\n        var isExpanded = this.expandedId === incident.id;\n        var reportedDate = new Date(incident.reported_at);\n        // Format date for display\n        var formattedDate = reportedDate.toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric',\n        });\n        // Create incident item element\n        var li = document.createElement('li');\n        li.className = \"incident-item severity-\".concat(incident.severity.toLowerCase());\n        li.setAttribute('data-id', incident.id.toString());\n        // Create header section\n        var header = document.createElement('div');\n        header.className = 'incident-header';\n        var title = document.createElement('div');\n        title.className = 'incident-title';\n        title.textContent = incident.title;\n        var meta = document.createElement('div');\n        meta.className = 'incident-meta';\n        var severityBadge = document.createElement('span');\n        severityBadge.className = \"severity-badge severity-\".concat(incident.severity.toLowerCase());\n        // Add icon based on severity\n        var severityIcon = document.createElement('i');\n        if (incident.severity === 'Low') {\n            severityIcon.className = 'fas fa-info-circle';\n        }\n        else if (incident.severity === 'Medium') {\n            severityIcon.className = 'fas fa-exclamation-circle';\n        }\n        else {\n            severityIcon.className = 'fas fa-exclamation-triangle';\n        }\n        severityBadge.appendChild(severityIcon);\n        severityBadge.appendChild(document.createTextNode(\" \".concat(incident.severity)));\n        var date = document.createElement('span');\n        date.className = 'incident-date';\n        var dateIcon = document.createElement('i');\n        dateIcon.className = 'far fa-calendar-alt';\n        date.appendChild(dateIcon);\n        date.appendChild(document.createTextNode(\" \".concat(formattedDate)));\n        var viewDetailsBtn = document.createElement('button');\n        viewDetailsBtn.className = \"view-details-btn \".concat(isExpanded ? 'expanded' : '');\n        viewDetailsBtn.setAttribute('data-id', incident.id.toString());\n        var detailsBtnIcon = document.createElement('i');\n        detailsBtnIcon.className = \"fas fa-chevron-\".concat(isExpanded ? 'up' : 'down');\n        viewDetailsBtn.appendChild(detailsBtnIcon);\n        viewDetailsBtn.appendChild(document.createTextNode(\" \".concat(isExpanded ? 'Hide Details' : 'View Details')));\n        meta.appendChild(severityBadge);\n        meta.appendChild(date);\n        var actions = document.createElement('div');\n        actions.className = 'incident-actions';\n        actions.appendChild(viewDetailsBtn);\n        header.appendChild(title);\n        header.appendChild(meta);\n        header.appendChild(actions);\n        // Create description section\n        var description = document.createElement('div');\n        description.className = \"incident-description \".concat(isExpanded ? 'show-description' : '');\n        description.textContent = incident.description;\n        // Assemble incident item\n        li.appendChild(header);\n        li.appendChild(description);\n        return li;\n    };\n    AISafetyDashboard.prototype.toggleIncidentDetails = function (incidentId) {\n        if (this.expandedId === incidentId) {\n            this.expandedId = null;\n        }\n        else {\n            this.expandedId = incidentId;\n        }\n        this.renderIncidents();\n    };\n    AISafetyDashboard.prototype.handleFormSubmit = function () {\n        // Get form values\n        var titleInput = document.getElementById('title');\n        var descriptionInput = document.getElementById('description');\n        var severityRadios = document.getElementsByName('severity');\n        var selectedSeverity = 'Medium';\n        // Get selected severity\n        for (var i = 0; i < severityRadios.length; i++) {\n            var radio = severityRadios[i];\n            if (radio.checked) {\n                selectedSeverity = radio.value;\n                break;\n            }\n        }\n        // Form validation\n        if (!titleInput.value.trim() || !descriptionInput.value.trim()) {\n            return false;\n        }\n        // Create new incident\n        var newIncident = {\n            id: this.generateNewId(),\n            title: titleInput.value.trim(),\n            description: descriptionInput.value.trim(),\n            severity: selectedSeverity,\n            reported_at: new Date().toISOString()\n        };\n        // Add to incidents array\n        this.incidents.unshift(newIncident);\n        // Reset form\n        this.newIncidentForm.reset();\n        // Re-render incidents list\n        this.renderIncidents();\n        this.updateIncidentsCount();\n        return true;\n    };\n    AISafetyDashboard.prototype.generateNewId = function () {\n        // Get the highest current ID and add 1\n        if (this.incidents.length === 0) {\n            return 1;\n        }\n        var maxId = Math.max.apply(Math, this.incidents.map(function (incident) { return incident.id; }));\n        return maxId + 1;\n    };\n    AISafetyDashboard.prototype.showNotification = function () {\n        var _this = this;\n        // Show the notification\n        this.notification.classList.add('show');\n        // Hide after 3 seconds\n        setTimeout(function () {\n            _this.notification.classList.remove('show');\n        }, 3000);\n    };\n    return AISafetyDashboard;\n}());\n// Initialize the dashboard when the DOM is fully loaded\ndocument.addEventListener('DOMContentLoaded', function () {\n    new AISafetyDashboard();\n});\n\n\n//# sourceURL=webpack://sparklehood/./src/main.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/main.ts"]();
/******/ 	
/******/ })()
;